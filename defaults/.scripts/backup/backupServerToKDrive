#!/bin/bash

function stream_and_upload_chunks() {
	local base_name="$1"
	local chunk_size="$2" # in bytes
	local rclone_remote="$3"
	local remote_folder="$4"

	local chunk_num=0
	local tmpfile

	while true; do
		tmpfile=$(mktemp)

		# dd reads up to chunk_size bytes from stdin (fd 0)
		# bs=1M count=... reads in megabytes; calculate count accordingly
		# status=none suppresses dd output
		# iflag=fullblock makes dd wait for stdin to fill the full block without exiting when there is a pause in data flow
		dd bs=1M count=$((chunk_size / 1024 / 1024)) status=none of="$tmpfile" iflag=fullblock

		# Check if file has any data
		if [ ! -s "$tmpfile" ]; then
			rm -f "$tmpfile"
			break
		fi

		chunk_name=$(printf "%s.part%03d" "$base_name" "$chunk_num")
		echo "Uploading chunk $chunk_num ($chunk_name)..."
		rclone rcat -P "$rclone_remote:$remote_folder/$chunk_name" <"$tmpfile"

		rm -f "$tmpfile"
		((chunk_num++))
	done
}

function UploadToKDrive() {
	folder_to_backup=$1
	targetGpgKey=$2
	remote_name=$3
	remote_target_folder=$4
	remote_file_name=$5
	chunk_size=$6
	additional_tar_parameters=$7
	cmd1="tar -cv -I \"xz -6 -T0\" $additional_tar_parameters -pf - $folder_to_backup"
	# eval "$cmd1" | gpg --encrypt --recipient "$targetGpgKey" --yes | rclone rcat -P "$remote_name:$remote_target_folder/$remote_file_name"
	eval "$cmd1" | gpg --encrypt --recipient "$targetGpgKey" --yes | stream_and_upload_chunks $remote_file_name $chunk_size $remote_name $remote_target_folder
}

if [ -z "$(gpg --list-secret-keys)" ]; then
	echo "No GPG key for encryption currently available."
	echo "Generating one..."
	gpg --default-new-key-algo rsa8192 --gen-key
fi

# if [ x"${RCLONE_CONFIG_PASS}" == "x" ]; then
# 		read -s -p "Password for rclone configuration store: " rclone_password
# 		echo
#
# 		export RCLONE_CONFIG_PASS=$rclone_password
# fi

rclone_remote="kDrive"
remote_target_folder="backup-rclone"
targetGPGKey="tinoheuberger@protonmail.com"
chunk_size=$((49 * 1024 * 1024 * 1024)) # 49GB

cd /data
mkdir big-tmp
export TMPDIR=/data/big-tmp

rclone purge $rclone_remote:$remote_target_folder
rclone mkdir $rclone_remote:$remote_target_folder

UploadToKDrive ConfigStoreAstroBot $targetGPGKey $rclone_remote "$remote_target_folder" "ConfigStoreAstroBot.tar.xz.gpg" $chunk_size
UploadToKDrive Backup $targetGPGKey $rclone_remote "$remote_target_folder" "Backup.tar.xz.gpg" $chunk_size
UploadToKDrive Documents $targetGPGKey $rclone_remote "$remote_target_folder" "Documents.tar.xz.gpg" $chunk_size
UploadToKDrive VirtualMachines $targetGPGKey $rclone_remote "$remote_target_folder" "VirtualMachines.tar.xz.gpg" $chunk_size
UploadToKDrive Astrophotography $targetGPGKey $rclone_remote "$remote_target_folder" "Astrophotography.tar.xz.gpg" $chunk_size "--exclude 'Light' --exclude '*LIGHT*' --exclude 'Lights' --exclude 'Night*' --exclude 'Flat*' --exclude '*DARKS*' --exclude 'Calib' --exclude '*Darks*' --exclude '*BIAS*' --exclude '*Bias*' --exclude 'gaia' --exclude '*.avi' --exclude '*.AVI'"
UploadToKDrive containers $targetGPGKey $rclone_remote "$remote_target_folder" "containers.tar.xz.gpg" $chunk_size
UploadToKDrive docker-data/volumes $targetGPGKey $rclone_remote "$remote_target_folder" "docker-volumes.tar.xz.gpg" $chunk_size

rm -rf big-tmp
